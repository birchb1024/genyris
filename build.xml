<project name="Genyris" default="all" basedir=".">
    <!-- -->
    <buildnumber/>
    <property name="build.compiler" value="javac1.6"/>
    <property name="needed.lib.dir" value="needed" />
    <property name="junit.lib.dir" value="needed" />
    <property name="build.dir" value="build" />
    <property name="dist.dir" value="dist" />
    <property name="rel.dir" value="rel" />
    <property name="src.compile.dir" value="${build.dir}/classes" />
    <property name="src.dir" value="src" />
    <property name="version.dir" value="${src.dir}/org/genyris/load/boot" />
    <property file="secrets.properties" />

    <tstamp>
        <format property="TODAY" pattern="dd/MM/yyyy HH:mm:ss" />
    </tstamp>

    <target name="clean" depends="only-clean" />

    <target name="compile" depends="only-clean, hg-info, only-init, only-compile" description="Compile the Java" />
    <target name="binary" depends="compile, only-make-jar, only-compile-docs, only-binary" description="create jar and documentation" />
    <target name="make-jar" depends="compile, only-make-jar" description="compile and create jar" />
    <target name="all" depends="binary, test, reports" description="Build all" />

    <!-- Libraries required  -->
    <fileset id="needed.libs" dir="${needed.lib.dir}">
        <include name="bsf.jar" />
        <include name="commons-logging-1.1.jar" />
        <include name="servlet-api.jar" />
        <include name="junit.jar" />
        <include name="dsn.jar" />
        <include name="imap.jar" />
        <include name="mail.jar" />
        <include name="mailapi.jar" />
        <include name="pop3.jar" />
        <include name="smtp.jar" />
        <include name="opencsv-1.8.jar" />
    </fileset>

    <!-- Properties files from the classpath -->
    <fileset id="product.properties.files" dir="${java.src.dir}">
        <include name="*.properties" />
    </fileset>

    <!-- Classpath for JUnit testing -->
    <fileset id="junit.libs" file="${junit.lib.dir}/junit.jar" />


    <!-- ================================================================== -->
    <!--                        Classpaths                                  -->
    <!-- ================================================================== -->
    <path id="src.compile.classpath">
        <fileset refid="needed.libs" />
        <fileset refid="junit.libs" />
    </path>

    <!-- ================================================================== -->
    <!--                        Targets                                     -->
    <!-- ================================================================== -->
    <target name="debug">
        <echoproperties />
    </target>

    <target name="hg-info" description="Extract Mercurial information." depends="only-hg-workspace,only-hg-latest-tag,only-hg-status">
        <property name="specification-version" value="${hg.latest.tag}"/>
        <property name="implementation-version" value="${hg.workspace.revision.number}-${hg.workspace.revision.hex}.${build.number}"/>
        <property name="version" value="${specification-version}.${hg.workspace.revision.number}.${build.number}"/>
        
        <echo>Workspace has uncommitted changes = ${working-folder-has-uncommited-changes}</echo>  
        <echo>Latest tag is: '${hg.latest.tag}' revision '${hg.latest.tag.revision}'</echo>  
        <echo>workspace revision is '${hg.workspace.revision.number}' '${hg.workspace.revision.hex}'</echo>
        <echo>Build Number: ${build.number}</echo>
    </target>

    <target name="hg-committed" description="Fail if uncommitted changes" depends="only-hg-status">
        <fail if="working-folder-has-uncommited-changes" />
    </target>

    <target name="only-hg-status" description="hg state">
        <exec executable="hg" outputproperty="hg.status" errorproperty="hg.error" failonerror="true">
            <arg value="status" />
            <arg value="-arm" />
        </exec>
        <echo message="${hg.status}" />
        <condition property="working-folder-has-uncommited-changes">
            <not>
                <equals arg1="${hg.status}" arg2="" />
            </not>
        </condition>
    </target>

    <target name="only-hg-workspace">
	     <!-- Extract the info about the current workspace -->
        <exec executable="hg" output="tmp-hg-summary.txt" errorproperty="hg.error" failonerror="true">
            <arg value="summary" />
        </exec>
        <loadfile srcfile="tmp-hg-summary.txt" property="hg.workspace.revision.number">
            <filterchain>
               <headfilter lines="1" skip="0"/>
               <tokenfilter>
                  <replaceregex pattern="parent: +" replace="" flags="gi"/>
                  <replaceregex pattern=":.+ tip$" replace="" flags="gi"/>
               </tokenfilter>
               <striplinebreaks/>
            </filterchain>
        </loadfile>
        <loadfile srcfile="tmp-hg-summary.txt" property="hg.workspace.revision.hex">
            <filterchain>
               <headfilter lines="1" skip="0"/>
               <tokenfilter>
                  <replaceregex pattern="parent: +[0-9]+:" replace="" flags="gi"/>
                  <replaceregex pattern=" tip$" replace="" flags="gi"/>
               </tokenfilter>
               <striplinebreaks/>
            </filterchain>
        </loadfile>
        <delete file="tmp-hg-summary.txt"/>
	</target>

	<target name="only-hg-latest-tag">
	     <!-- Extract the last tag in the repository, not 'tip'.-->
        <exec executable="hg" output="tmp-hg-tags.txt" errorproperty="hg.error" failonerror="true">
            <arg value="tags" />
        </exec>
        <loadfile srcfile="tmp-hg-tags.txt" property="hg.latest.tag">
            <filterchain>
               <headfilter lines="1" skip="1"/>
               <tokenfilter>
                  <replaceregex pattern=" +.*$" replace="" flags="gi"/>
               </tokenfilter>
               <striplinebreaks/>
            </filterchain>
        </loadfile>
        <loadfile srcfile="tmp-hg-tags.txt" property="hg.latest.tag.revision">
            <filterchain>
               <headfilter lines="1" skip="1"/>
               <tokenfilter>
                  <replaceregex pattern="^.* +" replace="" flags="gi"/>
               </tokenfilter>
               <striplinebreaks/>
            </filterchain>
        </loadfile>
        <delete file="tmp-hg-tags.txt"/>
	</target>
   <target name="hg-update-rev" description="Fail if uncommitted changes" depends="only-hg-workspace,only-hg-latest-tag,hg-committed">
         <exec executable="hg" errorproperty="hg.error" failonerror="true">
            <arg value="update" />
            <arg value="-r" />
            <arg value="${hg.latest.tag}" />
   </exec>
       
    </target>

	<target name="only-init">
        <mkdir dir="${build.dir}" />
        <mkdir dir="${version.dir}" />
        <mkdir dir="${dist.dir}" />
        <mkdir dir="${rel.dir}" />
        <mkdir dir="${src.compile.dir}" />
    </target>

    <target name="only-clean">
        <delete dir="${build.dir}" />
        <delete dir="${dist.dir}" />
        <delete dir="${rel.dir}" />
    </target>

    <target name="only-compile">
        <javac srcdir="${src.dir}" destdir="${src.compile.dir}" classpathref="src.compile.classpath" source="1.4" target="1.4" verbose="no">
            <include name="org/**" />
            <include name="com/**" />
        </javac>
    </target>

    <target name="only-compile-docs" description="Creat PDF manual" depends="hg-info">
        <copy file="doc/reference/manual.lyx" tofile="dist/genyris-manual-${version}.lyx" verbose="true" overwrite="true">
            <filterchain>
                <replacetokens>
                      <token key="GENYRIS-SPECIFICATION-VERSION" value="${specification-version}"/>
                      <token key="GENYRIS-IMPLEMENTATION-VERSION" value="${implementation-version}"/>
                </replacetokens>
            </filterchain>
        </copy>
        <copy todir="dist" verbose="true">
            <fileset dir="${basedir}/doc/reference/">
                <include name="*jpg" />
            </fileset>
        </copy>
        <exec executable="lyx" dir="dist" failonerror="true" os="Linux">
            <arg value="--export" />
            <arg value="pdf" />
            <arg value="genyris-manual-${version}.lyx" />
        </exec>
        <exec executable="C:\Program Files\LyX16\bin\lyx.exe" dir="dist" failonerror="true" os="Windows XP">
            <arg value="--export" />
            <arg value="pdf" />
            <arg value="genyris-manual-${version}.lyx" />
        </exec>
        <exec executable="C:\Python25\python.exe" dir="dist" failonerror="true" os="Windows XP">
            <arg value="C:\downloads\elyxer\elyxer-1.0.4\elyxer.py" />
            <arg value="genyris-manual-${version}.lyx" />
            <arg value="genyris-manual-${version}.html" />
        </exec>    
        <exec executable="/usr/bin/python" dir="dist" failonerror="true" os="Linux">
            <arg value="/home/birchb/apps/elyxer/elyxer-1.0.4/elyxer.py" />
            <arg value="genyris-manual-${version}.lyx" />
            <arg value="genyris-manual-${version}.html" />
        </exec>    
        <delete verbose="true">
            <fileset dir="dist">
                <include name="*jpg" />
                <include name="*lyx" />
                <include name="*dvi" />
            </fileset>
        </delete>
        <copy file="dist/genyris-manual-${version}.pdf" tofile="rel/genyris-manual-${version}.pdf" verbose="true" />
        <checksum file="rel/genyris-manual-${version}.pdf" forceOverwrite="yes" />
        <copy file="dist/genyris-manual-${version}.html" tofile="rel/genyris-manual-${version}.html" verbose="true" />
        <checksum file="rel/genyris-manual-${version}.html" forceOverwrite="yes" />

    </target>

    <target name="only-binary" depends="make-jar, only-compile-docs" description="Make a binary release">
        <tstamp />
        <copy todir="dist" verbose="false">
            <fileset dir="${basedir}">
                <include name="needed/**/*jar" />
            </fileset>
        </copy>
        <zip destfile="rel/genyris-binary-${version}.zip" duplicate="fail" defaultexcludes="no">
            <fileset dir="${basedir}">
                <include name="LICENSE" />
                <include name="README" />
                <include name="dist/**/*" />
                <include name="lib/**/*" />
                <include name="bin/**/*" />
                <include name="examples/**/*" />
                <include name="test/**/*" />
            </fileset>
        </zip>
        <checksum file="rel/genyris-binary-${version}.zip" forceOverwrite="yes" />
    </target>

    <target name="sf-publish-mercurial-source-" description="publish source code to SourceForge Mercurial repo" depends="hg-info, hg-committed,test">
        <exec executable="hg" errorproperty="hg.error" failonerror="true">
            <arg value="push" />
            <arg value="ssh://billbirch@genyris.hg.sourceforge.net/hgroot/genyris/genyris" />
        </exec>
    </target>

    <target name="only-publish-to-google-mercurial" description="publish source code to Google Code Mercurial repo" depends="hg-info, hg-committed, only-test">
        <exec executable="hg" failonerror="true">
            <arg value="push"/>
            <arg value="GoogleCode" />
        </exec>
    </target>

    <target name="sf-publish-files" description="publish source and binaries to SourceForge Files area" depends="hg-info, hg-committed">
        <input message="password?" addproperty="password" />
        <scp todir="billbirch,genyris:${password}@frs.sourceforge.net:/home/frs/project/g/ge/genyris/binary" verbose="true" trust="true">
            <fileset dir="rel">
                <include name="**/*binary*" />
            </fileset>
        </scp>
        <scp todir="billbirch,genyris:${password}@frs.sourceforge.net:/home/frs/project/g/ge/genyris/source" verbose="true" trust="true">
            <fileset dir="rel">
                <include name="**/*source*" />
            </fileset>
        </scp>
      <scp todir="billbirch,genyris:${password}@frs.sourceforge.net:/home/frs/project/g/ge/genyris/documentation" verbose="true" trust="true">
         <fileset dir="rel">
            <include name="**/*manual*" />
         </fileset>
      </scp>
    </target>

    <target name="archive" depends="make-jar" description="Make a backup">
        <input message="Destination directory for archive?" addproperty="archive.dest" />
        <tstamp />

        <jar destfile="${archive.dest}/genyris-archive-${DSTAMP}${TSTAMP}.jar" duplicate="fail" defaultexcludes="no">
            <fileset dir="${basedir}" includes="*" />
            <fileset dir="${basedir}" includes="*/**/*">
                <exclude name="idebuild/**/*" />
                <exclude name="build/**/*" />
            </fileset>
        </jar>
    </target>


    <target name="only-make-jar">
        <jar destfile="${dist.dir}/genyris-bin-${version}.jar" duplicate="fail">
            <fileset dir="${basedir}" includes="README LICENSE" />
            <fileset dir="${build.dir}" includes="version/**/*" />
            <fileset dir="${src.compile.dir}" includes="**/*.class" excludes="**/GenyrisServlet.class" />
            <fileset dir="${needed.lib.dir}" includes="junit/**/*" />
            <fileset dir="${src.dir}" includes="**/*.g" />
            <fileset dir="${src.dir}" includes="**/*.properties" />
            <fileset dir="${basedir}" includes="test/**/*" />
            <manifest>
                <attribute name="Main-Class" value="org.genyris.interp.ClassicReadEvalPrintLoop" />
                <attribute name="Class-Path" value="needed/junit.jar needed/mail.jar needed/mailapi.jar needed/dsn.jar needed/imap.jar needed/smtp.jar needed/pop3.jar needed/opencsv-1.8.jar" />
                <attribute name="Specification-Title" value="Genyris" />
                <attribute name="Specification-Version" value="${specification-version}" />
                <attribute name="Specification-Vendor" value="genyris.org" />
                <attribute name="Implementation-Title" value="Genyris" />
                <attribute name="Implementation-Version" value="${implementation-version}" />
                <attribute name="Implementation-Vendor" value="Peter William Birch" />
                <attribute name="Implementation-Date" value="${TODAY}" />
            </manifest>
        </jar>
    </target>

    <target name="test" depends="binary, only-test"/>
    <target name="only-test" depends="hg-info">
        <exec executable="java" failonerror="true">
        	<env key="GENYRIS_HOME" value="${basedir}"/>
            <arg value="-showversion" />
            <arg value="-jar" />
            <arg value="dist/genyris-bin-${version}.jar" />
            <arg value="test/acceptance/suite.g" />
        </exec>
    </target>

	<target name="reports" depends="only-report-todo"/>
	<target name="only-report-todo">
        <exec executable="java" failonerror="true">
            <env key="GENYRIS_HOME" value="${basedir}"/>
            <arg value="-jar" />
            <arg value="dist/genyris-bin-${version}.jar" />
            <arg value="examples/file-lines.g" />
            <arg value=".*\.g$|.*\.java$|.*\.lyx" />
            <arg value=".*TODO.*|.*FIXME.*" />
            <arg value="${basedir}" />
        </exec>
	</target>

	
	
	
	</project>
