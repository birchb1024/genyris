<project name="Genyris" default="all" basedir=".">
    <!-- -->
    <buildnumber/>
    <property name="build.compiler" value="javac1.6"/>
    <property name="needed.lib.dir" value="needed" />
    <property name="junit.lib.dir" value="needed" />
    <property name="build.dir" value="build" />
    <property name="dist.dir" value="dist" />
    <property name="rel.dir" value="rel" />
    <property name="src.compile.dir" value="${build.dir}/classes" />
    <property name="src.dir" value="src" />
    <property name="version.dir" value="${src.dir}/org/genyris/load/boot" />

    <tstamp>
        <format property="TODAY" pattern="dd/MM/yyyy HH:mm:ss" />
    </tstamp>

    <target name="clean" depends="only-clean" />

    <target name="compile" depends="only-clean, only-hg-version, only-init, only-compile" description="Compile the Java" />
    <target name="binary-release" depends="compile, only-binary-jar, only-compile-docs, only-binary-release" description="compile and create jar" />
    <target name="binary-jar" depends="compile, only-binary-jar" description="compile and create jar" />
    <target name="src-release" depends="only-hg-version, only-source-release" description="Zip source code." />
    <target name="all" depends="binary-release, src-release, test" description="Build all" />

    <!-- Libraries required  -->
    <fileset id="needed.libs" dir="${needed.lib.dir}">
        <include name="bsf.jar" />
        <include name="commons-logging-1.1.jar" />
        <include name="servlet-api.jar" />
        <include name="junit.jar" />
        <include name="dsn.jar" />
        <include name="imap.jar" />
        <include name="mail.jar" />
        <include name="mailapi.jar" />
        <include name="pop3.jar" />
        <include name="smtp.jar" />
        <include name="opencsv-1.8.jar" />
    </fileset>

    <!-- Properties files from the classpath -->
    <fileset id="product.properties.files" dir="${java.src.dir}">
        <include name="*.properties" />
    </fileset>

    <!-- Classpath for JUnit testing -->
    <fileset id="junit.libs" file="${junit.lib.dir}/junit.jar" />


    <!-- ================================================================== -->
    <!--                        Classpaths                                  -->
    <!-- ================================================================== -->
    <path id="src.compile.classpath">
        <fileset refid="needed.libs" />
        <fileset refid="junit.libs" />
    </path>

    <!-- ================================================================== -->
    <!--                        Targets                                     -->
    <!-- ================================================================== -->
    <target name="debug">
        <echoproperties />
    </target>

    <target name="only-hg-version" description="hg state">
        <exec executable="hg" outputproperty="hg.tip" errorproperty="hg.error" failonerror="false">
            <arg value="tip" />
            <arg value="--template" />
            <arg value="{rev}-{node|short}" />
        </exec>
        <exec executable="hg" outputproperty="hg.tip.date" errorproperty="hg.error" failonerror="false">
            <arg value="tip" />
            <arg value="--template" />
            <arg value="{date|date}" />
        </exec>
        <echo>Hg Tip Date: ${hg.tip.date}</echo>
        <echo>Hg Tip: ${hg.tip}</echo>
        <echo>Build Number: ${build.number}</echo>
        <property name="version" value="${hg.tip}.${build.number}"/>
        <exec executable="hg" output="${version.dir}/hglog.txt">
            <arg value="log" />
        </exec>
    </target>

    <target name="only-hg-status" description="hg state">
        <exec executable="hg" outputproperty="hg.status" errorproperty="hg.error" failonerror="true">
            <arg value="status" />
            <arg value="-arm" />
        </exec>
        <echo message="${hg.status}" />
        <condition property="working-folder-has-uncommited-changes">
            <not>
                <equals arg1="${hg.status}" arg2="" />
            </not>
        </condition>
        <fail if="working-folder-has-uncommited-changes" />
    </target>

    <target name="only-init">
        <mkdir dir="${build.dir}" />
        <mkdir dir="${version.dir}" />
        <mkdir dir="${dist.dir}" />
        <mkdir dir="${rel.dir}" />
        <mkdir dir="${src.compile.dir}" />
    </target>

    <target name="only-clean">
        <delete dir="${build.dir}" />
        <delete dir="${dist.dir}" />
        <delete dir="${rel.dir}" />
    </target>

    <target name="only-compile">
        <javac srcdir="${src.dir}" destdir="${src.compile.dir}" classpathref="src.compile.classpath" source="1.4" target="1.4" verbose="no">
            <include name="org/**" />
            <include name="com/**" />
        </javac>
    </target>

    <target name="only-compile-docs" description="Creat PDF manual" depends="only-hg-version">
        <copy file="doc/reference/manual.lyx" tofile="dist/genyris-manual-${version}.lyx" verbose="true" overwrite="true">
            <filterchain>
                <replacetokens>
                      <token key="GENYRIS-HG-TIP" value="${version}"/>
                </replacetokens>
            </filterchain>
        </copy>
        <exec executable="lyx" dir="dist" failonerror="true" os="Linux">
            <arg value="--export" />
            <arg value="pdf" />
            <arg value="genyris-manual-${version}.lyx" />
        </exec>
        <exec executable="C:\Program Files\LyX16\bin\lyx.exe" dir="dist" failonerror="true" os="Windows XP">
            <arg value="--export" />
            <arg value="pdf" />
            <arg value="genyris-manual-${version}.lyx" />
        </exec>
        <delete file="dist/genyris-manual-${version}.lyx" verbose="true"/>
        <copy file="dist/genyris-manual-${version}.pdf" tofile="rel/genyris-manual-${version}.pdf" verbose="true" />
      <checksum file="rel/genyris-manual-${version}.pdf" forceOverwrite="yes" />

    </target>


    <target name="only-source-release" depends="only-hg-version" description="Make a source release">
        <tstamp />

        <zip destfile="rel/genyris-source-${version}.zip" duplicate="fail" defaultexcludes="no">
            <fileset dir="${basedir}">
                <include name="LICENSE" />
                <include name="README" />
                <include name="build.xml" />
                <include name="doc/**/*.lyx" />
                <include name="doc/**/*.odp" />
                <include name="examples/**/*" />
                <include name="lib/**/*" />
                <include name="needed/**/*" />
                <include name="src/**/*.java" />
                <include name="src/**/*.properties" />
                <include name="src/**/*.g" />
                <include name="test/**/*" />
                <include name="web/**/*" />
            </fileset>
        </zip>
        <checksum file="rel/genyris-source-${version}.zip" forceOverwrite="yes" />
    </target>

    <target name="only-binary-release" depends="binary-jar, only-compile-docs" description="Make a binary release">
        <tstamp />
        <copy todir="dist" verbose="false">
            <fileset dir="${basedir}">
                <include name="needed/**/*jar" />
            </fileset>
        </copy>
        <zip destfile="rel/genyris-binary-${version}.zip" duplicate="fail" defaultexcludes="no">
            <fileset dir="${basedir}">
                <include name="LICENSE" />
                <include name="README" />
                <include name="dist/**/*" />
                <include name="lib/**/*" />
                <include name="bin/**/*" />
                <include name="examples/**/*" />
                <include name="test/**/*" />
            </fileset>
        </zip>
        <checksum file="rel/genyris-binary-${version}.zip" forceOverwrite="yes" />
    </target>

    <target name="sf-publish-mercurial-source-" description="publish source code to SourceForge Mercurial repo" depends="only-hg-version, only-hg-status,test">
        <exec executable="hg" errorproperty="hg.error" failonerror="true">
            <arg value="push" />
            <arg value="ssh://billbirch@genyris.hg.sourceforge.net/hgroot/genyris/genyris" />
        </exec>
    </target>

    <target name="sf-publish-files" description="publish source and binaries to SourceForge Files area" depends="only-hg-version, only-hg-status">
        <input message="password?" addproperty="password" />
        <scp todir="billbirch,genyris:${password}@frs.sourceforge.net:/home/frs/project/g/ge/genyris/binary" verbose="true" trust="true">
            <fileset dir="rel">
                <include name="**/*binary*" />
            </fileset>
        </scp>
        <scp todir="billbirch,genyris:${password}@frs.sourceforge.net:/home/frs/project/g/ge/genyris/source" verbose="true" trust="true">
            <fileset dir="rel">
                <include name="**/*source*" />
            </fileset>
        </scp>
      <scp todir="billbirch,genyris:${password}@frs.sourceforge.net:/home/frs/project/g/ge/genyris/documentation" verbose="true" trust="true">
         <fileset dir="rel">
            <include name="**/*manual*" />
         </fileset>
      </scp>
    </target>

    <target name="archive" depends="binary-jar" description="Make a backup">
        <input message="Destination directory for archive?" addproperty="archive.dest" />
        <tstamp />

        <jar destfile="${archive.dest}/genyris-archive-${DSTAMP}${TSTAMP}.jar" duplicate="fail" defaultexcludes="no">
            <fileset dir="${basedir}" includes="*" />
            <fileset dir="${basedir}" includes="*/**/*">
                <exclude name="idebuild/**/*" />
                <exclude name="build/**/*" />
            </fileset>
        </jar>
    </target>


    <target name="only-binary-jar">
        <jar destfile="${dist.dir}/genyris-bin-${version}.jar" duplicate="fail">
            <fileset dir="${basedir}" includes="README LICENSE" />
            <fileset dir="${build.dir}" includes="version/**/*" />
            <fileset dir="${src.compile.dir}" includes="**/*.class" excludes="**/GenyrisServlet.class" />
            <fileset dir="${needed.lib.dir}" includes="junit/**/*" />
            <fileset dir="${src.dir}" includes="**/*.g" />
            <fileset dir="${src.dir}" includes="**/*.properties" />
            <fileset dir="${basedir}" includes="test/**/*" />
            <manifest>
                <attribute name="Main-Class" value="org.genyris.interp.ClassicReadEvalPrintLoop" />
                <attribute name="Class-Path" value="needed/junit.jar needed/mail.jar needed/mailapi.jar needed/dsn.jar needed/imap.jar needed/smtp.jar needed/pop3.jar needed/opencsv-1.8.jar" />
                <attribute name="Specification-Title" value="Genyris" />
                <attribute name="Specification-Version" value="${hg.tip} ${hg.tip.date}" />
                <attribute name="Specification-Vendor" value="genyris.org" />
                <attribute name="Implementation-Title" value="Genyris" />
                <attribute name="Implementation-Version" value="${version}" />
                <attribute name="Implementation-Vendor" value="Peter William Birch" />
                <attribute name="Implementation-Date" value="${TODAY}" />
            </manifest>
        </jar>
    </target>

    <target name="test" depends="binary-release, only-test"/>
    <target name="only-test" depends="only-hg-version">
        <exec executable="java" failonerror="true">
            <arg value="-version" />
        </exec>
        <exec executable="java" failonerror="true">
            <arg value="-jar" />
            <arg value="dist/genyris-bin-${version}.jar" />
            <arg value="test/acceptance/suite.g" />
        </exec>
    </target>

</project>
