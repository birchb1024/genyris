;;;
;;; Examples of context sensitive macros (also object-oriented macros)
;;;

;------------------------------------------------------
;
;  Define a macro in a private closure
;
def make-env ()
  defmacro if (test success-result failure-result)
    backquote
       cond
          ,test (list ,success-result "env-OK")
          true (list ,failure-result "env-Fail")
  def run-example ()
      if true 11 22
  the run-example

(make-env) ; => 11 "env-OK" ; Pair

;------------------------------------------------------
;
; simple macro defined by an un-classed object
;
define context (dict)

context
  ; define a macro in the environment of this object
  defmacro _if (test success-result failure-result)
    backquote
       cond
          ,test (list ,success-result "OK")
          true (list ,failure-result "Fail")

context
    _if nil "A" "B"            ; call the macro.

; => "B" "Fail" ; Pair

;------------------------------------------------------
;
; Now a macro belonging to a class.
;
class MySuperClass ()
  defmacro _if (test success-result failure-result)
    backquote
       cond
          ,test (list ,success-result "my-OK")
          true (list ,failure-result "my-Fail")


class MyClass (MySuperClass)       ; sub-class it


define my-instance                 ; create an instance
   (dict) : MyClass


my-instance              ; use the instance as an execution environment
   _if nil "A" "B"

; => "B" "my-Fail" ; Pair


