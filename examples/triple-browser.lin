@prefix u "http://www.genyris.org/lang/utilities#"

; web.serve 80 "examples/triple-browser.lin"

def tryToParseSymbol (str)
    define result  
       catch $errors (parse (str))
    if $errors 
        intern str
        result

def tryToParse (str)
    define result  
       catch $errors (parse (str))
    if (equal? (asString result) str)
        result
        str

define CSVFILE "/downloads/CMP_CMDB.csv"
define fi
   File(!new CSVFILE)
define in
   fi (!open 'read)
var store (triplestore)
define $line ""
while (not (equal? EOF (setq $line (in(!getline)))))
    ;print $line
    define aslist ($line(!split ","))
    define subject (tryToParseSymbol (car aslist))
    define predicate (tryToParseSymbol (cadr aslist))
    if (equal? 2 (length aslist))
        define object ""
        define object (tryToParse (cadr (cdr aslist)))
        
    catch $error 
       define tr (triple subject predicate object)
    cond
       $error
          u.format "~s ~s ~s ~s~%" $error subject predicate object
    store
       !add tr
in (!close)

print
   store(!asTriples)

def convertToRegex (str)
    cond
       (str(!match "\".*\""))
            ; exact
            setq str 
                (cadr (str(!split "\"")))
                    !toLowerCase
       else     
            setq str (str(!toLowerCase))
            setq str (str (!+ ".*"))
            setq str (".*" (!+ str))
    print str
    str
    
def searchStore(str)
    setq str (convertToRegex str)
    def matchFunc(s o p)
       ;u.format "~s ~s ~s ~s~%" s o p str
        or
          ((asString s)(!toLowerCase)) (!match str)
          ((asString p)(!toLowerCase)) (!match str)
          ((asString o)(!toLowerCase)) (!match str)
    store(!select nil nil nil matchFunc)

def searchURL (str)
   "/?op="(!+ str)

def renderTriple (t)
   define s (asString(t(!subject)))
   define p (asString(t(!predicate)))
   define o (asString(t(!object)))
   template
      tr()
         td() 
            a((href: ,(searchURL s))) ,s
         td() 
            a((href : ,(searchURL p))) ,p
         td() 
            a((href: ,(searchURL o))) ,o

def renderTripleList (ts)
    define result nil
    while ts
        ;display (car ts)
        setq result (cons (renderTriple (car ts)) result)
        setq ts (right ts)
    template
            table() ,result
define DEFAULT "\"Environment\""
df httpd-serve (request)
   var params (request(!getParameters))
   define operation DEFAULT
   cond
     params
        setq operation (params (!lookup "op"))
        cond
           (equal? operation "")
               setq operation DEFAULT      
        define searchResults 
            (searchStore operation)(!asTriples)
        define renderedResults 
            renderTripleList searchResults
        ;print searchResults
   var result
    list 200 "text/html"
      template
          html()
             head()
               title() "CMP CMDB Search"
             body()
                h2() "CMP CMDB Search"
                form()
                   input((name:"op") (size:"100") (value: ,operation)) ""
                   verbatim() "&nbsp;&nbsp;&nbsp;"
                   input((type:"submit") (value:"Search"))
                div()
                    ,renderedResults
   result

