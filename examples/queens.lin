;;;;
;;;; Taken from "Lisp" by Winston & Horn 2nd edition
;;;; problem 11-9
;;;;

define = equal?

def queens (size)
  queen-aux nil 0 size

def queen-aux (board n size)               ; start on next row
   cond
      (= n size)
         board-print (reverse board)
      else
         queen-sub board n 0 size

def queen-sub (board n m size)
   cond
      (= m size)
      else
         cond
            (conflict n m board)
            else
               queen-aux (cons (list n m) board) (+ n 1) size
         queen-sub board n (+ m 1) size

def conflict (cn cm cboard)
   cond
      (null? cboard) nil
      (or (threat cn cm (caar cboard) (cadar cboard))  (conflict cn cm (cdr cboard)))

def threat (i j a b)
   or
      = i a
      = j b
      = (- i j) (- a b)
      = (+ i j) (+ a b)


def board-print (board)
   board-print-aux board (length board)

def board-print-aux (board size)
   print "\n"
   cond
      (null? board)
      else
         board-print-sub (cadar board) 0 size
         board-print-aux (cdr board) size

def board-print-sub (column n size)
   cond
      (= n size)
      else
         cond
            (= column n)
               print 'Q
            else
               print '.
         board-print-sub column (+ n 1) size
