;; Copyright 2009 Peter William Birch <birchb@genyis.org>
;;
;; This software may be used and distributed according to the terms
;; of the Genyris License, in the file "LICENSE", incorporated herein by reference.
;;
@prefix sys "http://www.genyris.org/lang/system#"

define sys:path '(".")

class Module

defmacro import (moduleName)
   ; macro ensures module binding is create in the scope of caller
   define themodule (import-aux moduleName)
   template
       define ,moduleName ,themodule
               

def import-aux (moduleName)
   def do-import(moduleName path)
        cond
             (bound? moduleName)
                nil
             else
                 sys:mk-module path
   define tmp sys:path
   define result nil
   while tmp
       define file-path ((left tmp)(!+ "/" (asString moduleName) ".lin"))
       cond
           ((File!exists) file-path)
                 tmp = nil
                 result = (do-import moduleName file-path)
           else
                 tmp = (right tmp)
   if (null? result)
        raise ("Unable to import "(!+ (asString moduleName)))
        result
 
def sys:mk-module (path)                  
     define themodule (dict (!filename = path))
     tag Module themodule
     themodule (sys:import path)
     themodule

def reload (module)
    sys:mk-module module (module!filename)   
    
defmacro reload (module)
   ; macro ensures module binding is create in the scope of caller
   define themodule (sys:mk-module ((eval module)!filename))
   template
       define ,module ,themodule
       