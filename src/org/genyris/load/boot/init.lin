;; Copyright 2008 Peter William Birch <birchb@genyis.org>
;;
;; This software may be used and distributed according to the terms
;; of the Genyris License, in the file "LICENSE", incorporated herein by reference.
;;


defmacro define (var valu) (template (defvar ',var ,valu))
define var define
defmacro df (name args &rest body)
    template
        defvar ',name (lambdaq ,args ,@body)

defmacro setq (var valu) (template (set ',var ,valu))

defmacro if (test success-result failure-result)
   template
      cond
         ,test ,success-result
         else ,failure-result

define left car
define right cdr
def cadr (x) (car (cdr x))
def caadr (x) (car (car (cdr x)))
def cadar (x) (car (cdr (car x)))
def caar (x) (car (car x))

defmacro do (&rest expression)
   expression

define else do
define then do

def null? (sexp)
   cond
      sexp nil
      else true

def member? (item list)
   cond
      (null list)
         nil
      (equal (car list) item)
         list
      else
          member? item (cdr list)

def map-left (some-list some-function)
   cond
      some-list
         cons
            some-function (left some-list)
            map-left (right some-list) some-function

load "org/genyris/load/boot/assert.lin"
load "org/genyris/load/boot/alist.lin"
load "org/genyris/load/boot/object.lin"
load "org/genyris/load/boot/listoflines.lin"
load "org/genyris/load/boot/file.lin"

